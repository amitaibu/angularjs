<?php

/**
 * Implements hook_library().
 */
function angularjs_library() {
  $libraries = array();
  $library_path = libraries_get_path('angular');

  $js = array(
    $library_path . '/angular.min.js' => array(),
    $library_path . '/angular-resource.min.js' => array(),
    $library_path . '/angular-cookies.min.js' => array(),
    $library_path . '/angular-sanitize.min.js' => array());

  // Load module types exposed by modules
  foreach (array('resources', 'filters', 'directives', 'servies') as $type) {
    foreach (angularjs_get_modules($type) as $path => $options) {
      $js[$path] = $options;
    }
  }

  $libraries['angularjs'] = array(
    'title' => 'AngularJS',
    'website' => 'angularjs.org',
    'version' => '1.0.2',
    'js' => $js,
  );

  $libraries['angularjs-bootstrap'] = array(
    'title' => 'AngularJS Bootstrap',
    'website' => 'angularjs.org',
    'version' => '1.0.2',
    'js' => array(
      $library_path . '/angular-bootstrap.min.js' => array(),
    ),
  );

  $settings = array(
    'restws_csrf_token' => drupal_get_token('restws')
  );

  drupal_add_js($settings, 'setting');

  return $libraries;
}

/**
 * Implements hook_element_info().
 */
function angularjs_element_info() {
  $types['ng_select'] = array(
    '#input' => TRUE,
    '#multiple' => FALSE,
    '#theme' => 'ng_select',
    '#theme_wrappers' => array('form_element'),
    '#process' => array('form_process_select', 'ajax_process_form', 'angularjs_process_select'),
    '#ng_model' => '',
    '#ng_controller' => '',
    '#attached' => array(
      'library' => array(
        array('angularjs'),
      ),
    ),
  );

  return $types;
}

/**
 * Implements hook_theme().
 */
function angularjs_theme() {
  return array(
    'ng_select' => array(
      'render element' => 'element',
    ),
  );
}

function angularjs_process_select($element) {
  // Pass the option to JS.
  $options = array();
  foreach ($element['#options'] as $value => $name) {
    $options[] = array('value' => $value, 'name' => $name);

  }
  $data['angularjs'][$element['#ng_controller']][$element['#ng_model']] = array(
    'options' => $options,
    'required' => $element['#required'],
    'selected' => $element['#default_value'],
    '_type' => 'select',
    '_name' => $element['#name'],
  );

  $element['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => $data,
  );

  return $element;
}

/**
 * Returns HTML for a ng-select form element.
 *
 * @ingroup themeable
 */
function theme_ng_select($variables) {
  $element = $variables['element'];
  element_set_attributes($element, array('id', 'name', 'size'));
  _form_set_class($element, array('form-select'));

  return '<select' . drupal_attributes($element['#attributes']) . ' ng-model="' . $element['#ng_model'] . '.selected" ng-options="option.value as option.name for option in '. $element['#ng_model'] . '.options"></select> ';
}



/**
 * Returns the registered AngularJS modules
 *
 * @param string $type
 * @param boolean $reset
 * @return array
 */
function angularjs_get_modules($type, $reset = FALSE) {
  $name = 'angularjs_' . $type;

  $modules = &drupal_static($name, array());

  if (TRUE === empty($resources)) {
    $cached_resources = cache_get($name);

    if (FALSE === isset($cached_resources->data) || TRUE == $reset) {
      $resources = module_invoke_all($name);
      drupal_alter($name, $resources);

      cache_set($name, $resources);
    }
    else {
      $resources = $cached_resources->data;
    }
  }

  return $resources;
}

/**
 * Returns a list of AngularJS resources exposed by modules
 *
 * @param boolean $reset
 * @return array
 */
function angularjs_get_resources($reset = FALSE) {
  return angularjs_get_modules('resources', $reset);
}

/**
 * Returns a list of AngularJS filters exposed by modules
 *
 * @param boolean $reset
 * @return array
 */
function angularjs_get_filters($reset = FALSE) {
  return angularjs_get_modules('filters', $reset);
}

/**
 * Returns a list of AngularJS directives exposed by modules
 *
 * @param boolean $reset
 * @return array
 */
function angularjs_get_directives($reset = FALSE) {
  return angularjs_get_modules('directives', $reset);
}

/**
 * Returns a list of AngularJS services exposed by modules
 *
 * @param boolean $reset
 * @return array
 */
function angularjs_get_services($reset = FALSE) {
  return angularjs_get_modules('services', $reset);
}

/**
 * Implements hook_angularjs_resources
 *
 * @return array
 */
function angularjs_angularjs_resources() {
  return array(drupal_get_path('module', 'angularjs') . '/js/angular_resource.js' => array());
}

/**
 * Sends AngularJS template to browser
 *
 * @param string $var
 */
function angularjs_template_output($var) {
  drupal_add_http_header('Content-Type', 'text/html');

  // Add new JS.
  echo drupal_get_js();

  if (isset($var)) {
    echo $var;
  }
}

/**
 * Adds an Angular JS template partial to be sent to the page. Takes either a text
 * template or a render array
 *
 * @param string $name
 * @param mixed $output
 * @return array
 */
function angularjs_add_partial($name = NULL, $output = NULL) {
  $partials = &drupal_static(__FUNCTION__, array());

  if (NULL != $name) {
    $partials[$name] = $output;
  }

  return $partials;
}

/**
 * Implements hook_page_alter
 *
 * Adds partials to the page footer
 *
 * @param array $variables
 */
function angularjs_page_alter(&$variables) {
  $partials = angularjs_add_partial();

  drupal_alter('angularjs_partials', $partials);

  foreach ($partials as $name => $output) {

    // If we have a render array render it
    if (TRUE === is_array($output)) {
      $output = render($output);
    }

    $element = array(
      '#tag' => 'script',
      '#value' => $output,
      '#attributes' => array(
        'type' => 'text/ng-template',
        'id' => $name,
      )
    );

    $variables['footer']['partial_' . $name] = array('#markup' => theme('html_tag', array('element' => $element)));
  }
}
